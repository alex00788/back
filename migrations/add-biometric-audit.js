const { Sequelize, DataTypes } = require('sequelize');
const path = require('path');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const sequelize = new Sequelize({
  dialect: 'postgres',
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'auto_admin',
  username: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'password',
  logging: false
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞—É–¥–∏—Ç–∞ –±–∏–æ–º–µ—Ç—Ä–∏–∏
async function createBiometricAuditTable() {
  try {
    await sequelize.query(`
      CREATE TABLE IF NOT EXISTS "biometricAuditLogs" (
        "id" SERIAL PRIMARY KEY,
        "email" VARCHAR(255) NOT NULL,
        "userId" INTEGER,
        "ip" VARCHAR(255) NOT NULL,
        "userAgent" TEXT,
        "action" VARCHAR(255) NOT NULL,
        "timestamp" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        "success" BOOLEAN NOT NULL,
        "errorMessage" TEXT,
        "credentialId" VARCHAR(255),
        "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        "updatedAt" TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    await sequelize.query(`
      CREATE INDEX IF NOT EXISTS "idx_biometric_audit_email" ON "biometricAuditLogs" ("email");
    `);

    await sequelize.query(`
      CREATE INDEX IF NOT EXISTS "idx_biometric_audit_timestamp" ON "biometricAuditLogs" ("timestamp");
    `);

    await sequelize.query(`
      CREATE INDEX IF NOT EXISTS "idx_biometric_audit_success" ON "biometricAuditLogs" ("success");
    `);

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ biometricAuditLogs —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã biometricAuditLogs:', error);
    throw error;
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—è biometricChallenge –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
async function removeOldBiometricChallengeField() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ
    const result = await sequelize.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'users' AND column_name = 'biometricChallenge';
    `);

    if (result[0].length > 0) {
      await sequelize.query(`
        ALTER TABLE "users" DROP COLUMN IF EXISTS "biometricChallenge";
      `);
      console.log('‚úÖ –ü–æ–ª–µ biometricChallenge —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users');
    } else {
      console.log('‚ÑπÔ∏è –ü–æ–ª–µ biometricChallenge –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ users');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—è biometricChallenge:', error);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
async function runMigration() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∞—É–¥–∏—Ç–∞
    await createBiometricAuditTable();

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ
    await removeOldBiometricChallengeField();

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('');
    console.log('üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:');
    console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ biometricAuditLogs –¥–ª—è –∞—É–¥–∏—Ç–∞');
    console.log('  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤');
    console.log('  ‚úÖ –£–¥–∞–ª–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –ø–æ–ª–µ biometricChallenge');
    console.log('');
    console.log('üîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('  1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis: sudo apt install redis-server');
    console.log('  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Redis: sudo systemctl start redis-server');
    console.log('  3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    console.log('  4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    await sequelize.close();
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  runMigration();
}

module.exports = { runMigration };

